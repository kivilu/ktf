<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kivi.framework.persist.mapper.KtfResourceMapperEx">
  <resultMap id="BaseResultMap" type="com.kivi.framework.vo.web.ResourceVO">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="ID" jdbcType="NUMERIC" property="id" />
    <result column="CODE" jdbcType="VARCHAR" property="code" />
    <result column="PCODE" jdbcType="VARCHAR" property="pcode" />
    <result column="PCODES" jdbcType="VARCHAR" property="pcodes" />
    <result column="NAME" jdbcType="VARCHAR" property="name" />
    <result column="ICON" jdbcType="VARCHAR" property="icon" />
    <result column="URL" jdbcType="VARCHAR" property="url" />
    <result column="NUM" jdbcType="NUMERIC" property="num" />
    <result column="LEVELS" jdbcType="DECIMAL" property="levels" />
    <result column="IS_MENU" jdbcType="DECIMAL" property="isMenu" />
    <result column="TIPS" jdbcType="VARCHAR" property="tips" />
    <result column="STATUS" jdbcType="DECIMAL" property="status" />
    <result column="IS_OPEN" jdbcType="DECIMAL" property="isOpen" />
    <result column="GMT_CREATE" jdbcType="TIMESTAMP" property="gmtCreate" />
    <result column="GMT_UPDATE" jdbcType="TIMESTAMP" property="gmtUpdate" />
  </resultMap>
  
  <resultMap id="MenuNodeMap" type="com.kivi.framework.vo.web.MenuNode">
    <id column="ID" jdbcType="NUMERIC" property="id" />
    <result column="parent_Id" jdbcType="NUMERIC" property="parentId" />
    <result column="NAME" jdbcType="VARCHAR" property="name" />
    <result column="ICON" jdbcType="VARCHAR" property="icon" />
    <result column="URL" jdbcType="VARCHAR" property="url" />
    <result column="NUM" jdbcType="NUMERIC" property="num" />
    <result column="LEVELS" jdbcType="DECIMAL" property="levels" />
    <result column="IS_MENU" jdbcType="DECIMAL" property="isMenu" />
  </resultMap>
  
  <sql id="Base_Column_List">
        id, code, pcode, name, icon, url, num, levels,pcodes,
        tips, status,IS_OPEN,IS_MENU
    </sql>
  
  
    <!-- <select id="listUserResources" parameterType="java.util.HashMap" resultMap="BaseResultMap">
        SELECT re.id,re.code,re.PCODE,re.PCODES,re.name,re.icon,re.URL,re.levels,re.IS_MENU,
               re.TIPS,re.STATUS,re.IS_OPEN,re.GMT_CREATE,re.GMT_UPDATE
        FROM KTF_RESOURCE re LEFT JOIN KTF_ROLE_RESOURCE rr
        ON re.id = rr.resource_id
        LEFT JOIN KTF_USER_ROLE ur
        ON rr.role_id =ur.role_id
        WHERE ur.user_id=#{userId}
        <if test="isMenu != null">
            AND re.IS_MENU= #{isMenu}
        </if>
        GROUP BY re.id
        ORDER BY re.num ASC
    </select> -->

    <select id="listRoleResources" parameterType="Long" resultMap="BaseResultMap">
        select m.id,
		       m.code,
		       m.pcode,
		       m.name,
		       m.icon,
		       m.url,
		       m.num,
		       m.levels,
		       m.pcodes,
		       m.tips,
		       m.status,
		       m.IS_OPEN,
		       m.IS_MENU
		  from KTF_ROLE_RESOURCE rel
		 inner join KTF_RESOURCE m
		    on rel.resource_id = m.id
		 where rel.role_id = #{roleId}
    </select>
    
    <select id="getResUrlsByRoleId" resultType="String">
        select m.url from
        KTF_ROLE_RESOURCE rel
        inner join KTF_RESOURCE m on rel.resource_id = m.id
        where rel.role_id = #{roleId}
    </select>
    
    
    <select id="listResourceByIds" parameterType="java.util.List" resultMap="MenuNodeMap">
    	SELECT
			m1.id AS id,
			m1.icon AS icon,
			(
				CASE
				WHEN (m2.id = 0 OR m2.id IS NULL) THEN
					0
				ELSE
					m2.id
				END
			) AS parent_Id,
			m1. NAME AS NAME,
			m1.url AS url,
			m1.levels AS levels,
			m1.is_menu,
			m1.num AS num
		FROM
			ktf_resource m1
		LEFT JOIN ktf_resource m2 ON m1.pcode = m2. CODE
		INNER JOIN (
			SELECT
				ID
			FROM
				ktf_resource
			WHERE
				ID IN (
					SELECT
						rela.resource_id
					FROM
						ktf_role_resource rela
					WHERE
						rela.role_id IN 
                        <foreach collection="list" index="index" item="item" open="(" separator="," close=")">  
				        	#{item}  
				    	</foreach>
				)
		) m3 ON m1.id = m3.id
		WHERE
			m1.is_menu = 1
		ORDER BY
			levels,
			num ASC
	</select>
	
	<select id="listResourceNameByIds" parameterType="java.util.List" resultType="String">
	  	SELECT name 
	  	FROM KTF_RESOURCE
	  	WHERE id IN
	  		<foreach collection="list" index="index" item="item" open="(" separator="," close=")">  
	        	#{item}  
	    	</foreach>
	</select>
	
	<select id="selectResources" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from KTF_RESOURCE
        where status = 0
        <if test="condition != null and condition != ''">
            and (name like CONCAT('%',#{condition},'%') or code like CONCAT('%',#{condition},'%'))
        </if>
        <if test="level != null">
            and levels = #{level}
        </if>
    </select>
    
    <select id="menuTreeList" resultType="com.kivi.framework.vo.web.ZTreeNode">
       SELECT m1.id AS id,
	       (CASE
	         WHEN (m2.id = 0 OR m2.id IS NULL) THEN
	          0
	         ELSE
	          m2.id
	       END) AS pId,
	       m1. NAME AS NAME,
	       (CASE
	         WHEN (m2.id = 0 OR m2.id IS NULL) THEN
	          1
	         ELSE
	          0
	       END) as isOpen
	  FROM KTF_RESOURCE m1
	  LEFT JOIN KTF_RESOURCE m2
	    ON m1.pcode = m2. CODE
	  ORDER BY m1.num ASC
    </select>
    
    <select id="getMenuIdsByRoleId" resultType="long">
        select resource_id from ktf_role_resource where role_id = #{roleId}
    </select>
    
    <select id="menuTreeListByMenuIds" resultType="com.kivi.framework.vo.web.ZTreeNode">
        SELECT m1.id AS id,
		       (CASE
		         WHEN (m2.id = 0 OR m2.id IS NULL) THEN
		          0
		         ELSE
		          m2.id
		       END) AS pId,
		       m1. NAME AS NAME,
		       (CASE
		         WHEN (m2.id = 0 OR m2.id IS NULL) THEN
		          1
		         ELSE
		          0
		       END) as isOpen,
		       (CASE
		         WHEN (m3.ID = 0 OR m3.ID IS NULL) THEN
		          0
		         ELSE
		          1
		       END) "checked"
		  FROM KTF_RESOURCE m1
		  LEFT JOIN KTF_RESOURCE m2
		    ON m1.pcode = m2. CODE
		  left join (SELECT ID FROM KTF_RESOURCE WHERE ID IN
        <foreach collection="list" index="index" item="i" open="("
                 separator="," close=")">
            #{i}
        </foreach>
        ) m3 on m1.id = m3.id
        ORDER BY m1.num ASC
    </select>
  
</mapper>